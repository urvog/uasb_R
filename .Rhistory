train <- data[1:NTrain,]
labelsTrain <- labels[1:NTrain]
test <- data[(NTrain+1):NObs,]
labelsTest <- labels[(NTrain+1):NObs]
pca <- princomp(train)
train <- predict(pca,train)[,1:2]
test <- predict(pca, test)[,1:2]
plot(train[labelsTrain=="B",1],train[labelsTrain=="B",2],col="red")
points(train[labelsTrain=="M",1],train[labelsTrain=="M",2],col="green")
points(test[labelsTest=="B",1],test[labelsTest=="B",2],col="cyan")
points(test[labelsTest=="M",1],test[labelsTest=="M",2],col="black")
trainFact=data.frame(train,y=as.factor(labelsTrain))
svmfit=svm(y~.,data=trainFact,kernel="linear",cross = 5)
print(svmfit)
out=predict(svmfit,train)
print(sum(out==labelsTrain))/NTrain
plot(svmfit,trainFact)
out=predict(svmfit,test)
print(sum(out==labelsTest))/NTest
dev.off()
demo("graphics")
update()
update.packages()
y
pandas
demo("graphics")
iris
head(iris)
demo("graphics")
x<-rnorm(50)
plot(x)
plot(x);
plot(x);
quit()
getwd()
setwd("~/Dropbox/Docencia Maestría en Software Libre UASB/3.2 Administracion y analisis de datos/Tema 3. Analisis de datos, Business Intelligence, DataScience/uasb_R")
#Practica en curso con lenguaje R
##verificamos que nos encontramos en el directorio de trabajo uasb_R/ obtenido del repositorio
#en github y listamos los archivos
getwd()
dir()
#cargamos los datos a una variable de tipo data.frame
DataTitanic<-read.table("titanic.csv", sep = ",", header = TRUE)
#obtenemos algunas estadísticas de los datos obtenidos
str(DataTitanic)
summary(DataTitanic)
#verificamos si tenemos datos faltantes (missing values)
table(is.na(DataTitanic))
summary(DataTitanic)
#analizamos cada columna para revisar cual tiene valores vacios
table(is.na(DataTitanic$PassengerId)) #no tiene valores vacios
table(is.na(DataTitanic$Survived)) #no tiene valores vacios
table(is.na(DataTitanic$PassengerId))
table(is.na(DataTitanic$PassengerId))
#cargamos todos los valores faltantes de la columna Age
faltantes<-is.na(DataTitanic$Age)
DataTitanicValido<-DataTitanic[!faltantes,]
DataTitanicNoValido<-DataTitanic[faltantes,]
#nuevamente obtenemos informacion de valores faltantes con el nuevo dataset
table(is.na(DataTitanicValido))
summary(DataTitanicValido)
#transformamos el atributo Pclass de numero a Factor
DataTitanicValido<-transform(DataTitanicValido, Pclass = factor(Pclass))
str(DataTitanicValido)
#comenzamos a mostrar algunos graficos de interes
#histogramas
colores<-colors() #para generar aleatoriamente colores con la funcion sample
##Cantidad de pasajeros x clase
d_clase<-matrix(table(DataTitanicValido$Pclass))
bp<-barplot(d_clase[,1], names.arg = c("1ra Clase", "2da Clase", "3ra Clase"),
col = colores[sample(1:655,3)])
text(bp, y = d_clase+20,labels = d_clase, xpd = TRUE)
title(main = "Cantidad de personas por clase", xlab = "Clases", ylab = "Frecuencia")
#una simple torta
torta<-pie(d_clase, c("1ra Clase","2da Clase","3ra Clase"), col = colores[sample(1:655,3)] )
title(main = "Distribucion de personas por clase")
## Promedios edad por clase
subtotal_edad<-aggregate(Age~Pclass, DataTitanicValido,mean)
bp<-barplot(subtotal_edad$Age, names.arg = subtotal_edad$Pclass, col = colores[sample(1:655,3)])
text(bp, y = round(subtotal_edad$Age,2)+4, labels = round(subtotal_edad$Age,2), xpd = TRUE)
title(main = "Promedios edad por clase", xlab = "Clases", ylab = "Promedio edad")
#Plot de edad vs costo ticket
plot(DataTitanicValido$Age,DataTitanicValido$Fare, col = colores[sample(1:655,2)], pch = 19, main = "Edad vs Costo Ticket",
xlab = "Edad", ylab = "Costo Ticket")
abline(lm(DataTitanicValido$Age~DataTitanicValido$Fare), col = "red")
abline(h = 200, col ="red")
abline(v = 70, col = "green")
#Plot Hermanos vs Padres e hijos
bp<-plot(DataTitanicValido$Fare,DataTitanicValido$Parch, col = colores[sample(1:655,2)], pch = 19, main = "Tickets vs Edad",
xlab = "Costo Tickets", ylab = "Parch", ylim = c(0,6))
pairs(~DataTitanicValido$Age+DataTitanicValido$SibSp+DataTitanicValido$Fare, data = DataTitanicValido)
##libreria lattice
library(lattice)
#plot ticket vs edad agrupados por Pclass
xyplot(Fare~Age|Survived, data = DataTitanicValido, xlab = "Costo Ticket", ylab = "Edad", main = "Graficos Lattice")
xyplot(Fare~Age|Embarked, data = DataTitanicValido, xlab = "Costo Ticket", ylab = "Edad", main = "Graficos Lattice")
barchart(Age~Survived|Embarked, data = DataTitanicValido, groups = Pclass, xlab = "Costo Ticket", ylab = "Edad",
main = "Graficos Lattice", auto.key = TRUE)
dev.off()
##libreria GGPlot
library(ggplot2)
#graficos basicos de qplot
qplot(Fare,Age, data = DataTitanicValido, color = Pclass)
#Lineas de tendencia
qplot(Fare,Age, data = DataTitanicValido, color = Pclass, geom = c("point","smooth"))
#grafico multidimensional fare,Age coloreado por clase y agrupado por lugar de embarque
qplot(Fare,Age, data = DataTitanicValido, color = Pclass, facets = Embarked~., main = "Grafico GGPLOT")
#histograma
qplot(Age, data = DataTitanicValido, fill = Pclass, facets = .~Embarked, main = "Grafico GGPLOT", binwidth = 5)
#MODELANDO CON CLUSTERS ALGORITMO KMEANS
#inicimos creado subconjuntos de datos que queremos analizar
d_cluster<-data.frame(edad = DataTitanicValido$Age, costo_ticket = DataTitanicValido$Fare)
d_kmeans<-kmeans(d_cluster,centers = 4, iter.max = 100)
#agregamos la columna con los datos del cluster
d_cluster$cluster<-d_kmeans$cluster
#mostramos informacion de los datos del cluster
head(d_kmeans)
#graficamos los puntos y los centroides utilizando el atributo "centers:"
plot(d_cluster$edad,d_cluster$costo_ticket, col = d_kmeans$cluster)
points(d_kmeans$centers, pch = 8, cex = 2)
write.table(d_cluster,"titanic_K-means.csv", sep = ",", row.names = FALSE)
names(DataTitanicValido)
d_cluster<-data.frame(edad = DataTitanicValido$Age,
costo_ticket = DataTitanicValido$Fare,
padres_hijos = DataTitanicValido$Parch)
d_kmeans<-kmeans(d_cluster,centers = 4, iter.max = 100)
d_cluster$cluster<-d_kmeans$cluster
d_cluster
install.packages("scatterplot3d")
head(d_kmeans)
head(d_cluster)
?attach
?scatterplot3d
scatterplot3d(edad,costo_ticket,padres_hijos,d_cluster)
library(scatterplot3d)
scatterplot3d(edad,costo_ticket,padres_hijos,d_cluster)
scatterplot3d(edad,costo_ticket,padres_hijos, d_cluster)
?scatterplot3d
scatterplot3d(d_cluster$edad,d_cluster$costo_ticket,d_cluster$padres_hijos)
scatterplot3d(d_cluster$edad,d_cluster$costo_ticket,d_cluster$padres_hijos, col = d_cluster$cluster)
scatterplot3d(d_cluster$edad,d_cluster$costo_ticket,d_cluster$padres_hijos, col = d_kmeans$cluster)
?scatterplot3d
scatterplot3d(d_cluster$edad,d_cluster$costo_ticket,d_cluster$padres_hijos, color = d_kmeans$cluster)
scatterplot3d(d_cluster$edad,d_cluster$costo_ticket,d_cluster$padres_hijos, color = d_kmeans$cluster,
main = "Clustering con K-Means", xlab = "Edad", ylab = "Costo Ticket", zlab = "Padres&Hijos" )
pch = 16)
scatterplot3d(d_cluster$edad,d_cluster$costo_ticket,d_cluster$padres_hijos, color = d_kmeans$cluster,
main = "Clustering con K-Means", xlab = "Edad", ylab = "Costo Ticket", zlab = "Padres&Hijos",
pch = 16)
scatterplot3d(d_cluster$edad,d_cluster$costo_ticket,d_cluster$padres_hijos, color = d_kmeans$cluster,
main = "Clustering con K-Means", xlab = "Edad", ylab = "Costo Ticket", zlab = "Padres&Hijos",
type  = "h")
plot(d_cluster$edad,d_cluster$costo_ticket, col = d_kmeans$cluster)
points(d_kmeans$centers, pch = 8, cex = 2)
plot(d_cluster$edad,d_cluster$costo_ticket, col = d_kmeans$cluster, main = "Clustering con K-means",
xlab = "Edad", ylab = "Costo Ticket")
dev.off()
plot(d_cluster$edad,d_cluster$costo_ticket, col = d_kmeans$cluster, main = "Clustering con K-means",
xlab = "Edad", ylab = "Costo Ticket")
points(d_kmeans$centers, pch = 8, cex = 2)
library(rpart)
library(rpart)
?printcp
library(rpart)
names(DataTitanic)
?rpart
str(DataTitanicValido)
m_arbol<-rpart(Survived~Sex+Age+Pclass+Embarked, data = DataTitanicValido, method = "class")
m_arbol
plot(m_arbol)
text(m_arbol)
dev.off()
plot(m_arbol)
dev.off()
plot(m_arbol)
text(m_arbol)
printcp
printcp(m_arbol)
plotcp(m_arbol)
plot(m_arbol, uniform = TRUE)
text(m_arbol, use.n=TRUE, all=TRUE, cex=.8)
par(mfrow = c(1,1))
plot(m_arbol, uniform = TRUE)
text(m_arbol, use.n=TRUE, all=TRUE, cex=.8)
text(m_arbol, use.n=TRUE, all=TRUE, cex=.1)
text(m_arbol, use.n=TRUE, all=TRUE, cex=.8)
dev.off()
text(m_arbol, use.n=TRUE, all=TRUE, cex=.8)
plot(m_arbol, uniform = TRUE)
text(m_arbol, use.n=TRUE, all=TRUE, cex=.8)
>par
?par
par(mfrow = c(1,1), mar = c(1,1,1,1))
plot(m_arbol, uniform = TRUE)
text(m_arbol, use.n=TRUE, all=TRUE, cex=.8)
m_arbol<-rpart(Survived~Sex+Age, data = DataTitanicValido, method = "class")
m_arbol
par(mfrow = c(1,1), mar = c(1,1,1,1))
plot(m_arbol, uniform = TRUE)
text(m_arbol, use.n=TRUE, all=TRUE, cex=.8)
m_arbol<-rpart(Survived~Sex+Age, data = DataTitanicValido)
par(mfrow = c(1,1), mar = c(1,1,1,1))
plot(m_arbol, uniform = TRUE)
text(m_arbol, use.n=TRUE, all=TRUE, cex=.8)
m_arbol
printcp(m_arbol)
m_arbol<-rpart(Survived~Sex+Age+Pclass, data = DataTitanicValido)
m_arbol
printcp(m_arbol)
par(mfrow = c(1,1), mar = c(1,1,1,1))
plot(m_arbol, uniform = TRUE)
text(m_arbol, use.n=TRUE, all=TRUE, cex=.8)
m_arbol
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(m_arbol, uniform = TRUE)
text(m_arbol, use.n=TRUE, all=TRUE, cex=.8)
m_arbol<-rpart(Survived~Age+Sex+Pclass, data = DataTitanicValido)
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(m_arbol, uniform = TRUE)
text(m_arbol, use.n=TRUE, all=TRUE, cex=.8)
m_arbol
?rpart
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(m_arbol, uniform = TRUE)
text(m_arbol, use.n=TRUE, all=TRUE, cex=.8)
?rpart
install.packages('rattle')
install.packages("rpart.plot")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("rattle")
install.packages("rpart.plot")
install.packages("RColorBrewer")
library(rattle)
library(rattle)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(m_arbol)
fancyRpartPlot(m_arbol)
names(DataTitanicValido)
m_arbol<-rpart(Survived~Age+Sex+Pclass+Embarked, data = DataTitanicValido)
fancyRpartPlot(m_arbol)
m_arbol<-rpart(Survived~Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = DataTitanicValido)
fancyRpartPlot(m_arbol)
m_arbol<-rpart(Survived~Pclass+Embarked, data = DataTitanicValido)
fancyRpartPlot(m_arbol)
m_arbol<-rpart(Survived~Embarked, data = DataTitanicValido)
fancyRpartPlot(m_arbol)
DataTitanic$Embarked
DataTitanic<-read.table("titanic.csv", sep = ",", header = TRUE)
faltantes<-is.na(DataTitanic$Age)
DataTitanicValido<-DataTitanic[!faltantes,]
DataTitanic$Embarked
table(DataTitanicValido$Embarked)
m_arbol<-rpart(Survived~Embarked, data = DataTitanicValido)
fancyRpartPlot(m_arbol)
fancyRpartPlot(m_arbol)
qplot(Survived,Embarked, data = DataTitanicValido, color = Pclass)
barchart(Age~Survived|Embarked, data = DataTitanicValido, groups = Pclass, xlab = "Costo Ticket", ylab = "Edad",
main = "Graficos Lattice", auto.key = TRUE)
str(DataTitanicValido)
fancyRpartPlot(m_arbol)
table(DataTitanicValido$Embarked)
m_arbol<-rpart(Survived~Embarked+Pclass, data = DataTitanicValido)
fancyRpartPlot(m_arbol)
m_arbol<-rpart(Survived~Embarked+Pclass, data = DataTitanicValido)
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(m_arbol, uniform = TRUE)
text(m_arbol, use.n=TRUE, all=TRUE, cex=.8)
DataTitanicValido<-transform(DataTitanicValido, Pclass = factor(Pclass))
m_arbol<-rpart(Survived~Embarked+Pclass, data = DataTitanicValido)
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(m_arbol, uniform = TRUE)
text(m_arbol, use.n=TRUE, all=TRUE, cex=.8)
fancyRpartPlot(m_arbol)
m_arbol<-rpart(Survived~Embarked+Pclass, data = DataTitanicValido, method = "class")
fancyRpartPlot(m_arbol)
m_arbol<-rpart(Survived~Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = DataTitanicValido, method = "class")
fancyRpartPlot(m_arbol)
printcp(m_arbol)
m_arbol<-rpart(Survived~Embarked, data = DataTitanicValido, method = "class")
printcp(m_arbol)
fancyRpartPlot(m_arbol)
m_arbol<-rpart(Embarked~Pclass + Sex + Age + SibSp + Parch + Fare, data = DataTitanicValido, method = "class")
fancyRpartPlot(m_arbol)
m_arbol<-rpart(Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = DataTitanicValido, method = "class")
names(DataTitanicValido
)
m_arbol<-rpart(Pclass~Sex + Age + SibSp + Parch + Fare + Embarked, data = DataTitanicValido, method = "class")
fancyRpartPlot(m_arbol)
printcp(m_arbol)
m_arbol<-rpart(Survived~Sex + Age + SibSp + Parch + Fare + Embarked, data = DataTitanicValido, method = "class")
fancyRpartPlot(m_arbol)
DataTitanicPredict<-read.table("titanic_predict.csv", sep = ",", header = TRUE)
prediccion<-predict(m_arbol,DataTitanicPredict,method = "class")
?predict
DataTitanicPredict<-transform(DataTitanicPredict, Pclass = factor(Pclass))
prediccion<-predict(m_arbol,DataTitanicPredict, type = "class")
names(DataTitanicPredict)
#cargamos los datos a una variable de tipo data.frame
DataTitanic<-read.table("titanic.csv", sep = ",", header = TRUE)
#obtenemos algunas estadísticas de los datos obtenidos
str(DataTitanic)
summary(DataTitanic)
#verificamos si tenemos datos faltantes (missing values)
table(is.na(DataTitanic))
summary(DataTitanic)
#analizamos cada columna para revisar cual tiene valores vacios
table(is.na(DataTitanic$PassengerId)) #no tiene valores vacios
table(is.na(DataTitanic$Survived)) #no tiene valores vacios
table(is.na(DataTitanic$PassengerId))
table(is.na(DataTitanic$PassengerId))
#cargamos todos los valores faltantes de la columna Age
faltantes<-is.na(DataTitanic$Age)
DataTitanicValido<-DataTitanic[!faltantes,]
DataTitanicNoValido<-DataTitanic[faltantes,]
#nuevamente obtenemos informacion de valores faltantes con el nuevo dataset
table(is.na(DataTitanicValido))
summary(DataTitanicValido)
#transformamos el atributo Pclass de numero a Factor
DataTitanicValido<-transform(DataTitanicValido, Pclass = factor(Pclass))
str(DataTitanicValido)
#comenzamos a mostrar algunos graficos de interes
#histogramas
colores<-colors() #para generar aleatoriamente colores con la funcion sample
##Cantidad de pasajeros x clase
d_clase<-matrix(table(DataTitanicValido$Pclass))
bp<-barplot(d_clase[,1], names.arg = c("1ra Clase", "2da Clase", "3ra Clase"),
col = colores[sample(1:655,3)])
text(bp, y = d_clase+20,labels = d_clase, xpd = TRUE)
title(main = "Cantidad de personas por clase", xlab = "Clases", ylab = "Frecuencia")
#una simple torta
torta<-pie(d_clase, c("1ra Clase","2da Clase","3ra Clase"), col = colores[sample(1:655,3)] )
title(main = "Distribucion de personas por clase")
## Promedios edad por clase
subtotal_edad<-aggregate(Age~Pclass, DataTitanicValido,mean)
bp<-barplot(subtotal_edad$Age, names.arg = subtotal_edad$Pclass, col = colores[sample(1:655,3)])
text(bp, y = round(subtotal_edad$Age,2)+4, labels = round(subtotal_edad$Age,2), xpd = TRUE)
title(main = "Promedios edad por clase", xlab = "Clases", ylab = "Promedio edad")
#Plot de edad vs costo ticket
plot(DataTitanicValido$Age,DataTitanicValido$Fare, col = colores[sample(1:655,2)], pch = 19, main = "Edad vs Costo Ticket",
xlab = "Edad", ylab = "Costo Ticket")
abline(lm(DataTitanicValido$Age~DataTitanicValido$Fare), col = "red")
abline(h = 200, col ="red")
abline(v = 70, col = "green")
#Plot Hermanos vs Padres e hijos
bp<-plot(DataTitanicValido$Fare,DataTitanicValido$Parch, col = colores[sample(1:655,2)], pch = 19, main = "Tickets vs Edad",
xlab = "Costo Tickets", ylab = "Parch", ylim = c(0,6))
pairs(~DataTitanicValido$Age+DataTitanicValido$SibSp+DataTitanicValido$Fare, data = DataTitanicValido)
##libreria lattice
library(lattice)
#plot ticket vs edad agrupados por Pclass
xyplot(Fare~Age|Survived, data = DataTitanicValido, xlab = "Costo Ticket", ylab = "Edad", main = "Graficos Lattice")
xyplot(Fare~Age|Embarked, data = DataTitanicValido, xlab = "Costo Ticket", ylab = "Edad", main = "Graficos Lattice")
barchart(Age~Survived|Embarked, data = DataTitanicValido, groups = Pclass, xlab = "Costo Ticket", ylab = "Edad",
main = "Graficos Lattice", auto.key = TRUE)
dev.off()
##libreria GGPlot
library(ggplot2)
#graficos basicos de qplot
qplot(Fare,Age, data = DataTitanicValido, color = Pclass)
#Lineas de tendencia
qplot(Fare,Age, data = DataTitanicValido, color = Pclass, geom = c("point","smooth"))
#grafico multidimensional fare,Age coloreado por clase y agrupado por lugar de embarque
qplot(Fare,Age, data = DataTitanicValido, color = Pclass, facets = Embarked~., main = "Grafico GGPLOT")
#histograma
qplot(Age, data = DataTitanicValido, fill = Pclass, facets = .~Embarked, main = "Grafico GGPLOT", binwidth = 5)
#MODELANDO CON CLUSTERS ALGORITMO KMEANS
#iniciamos creando subconjuntos de datos los cuales queremos analizar (edad vs costo ticket)
d_cluster<-data.frame(edad = DataTitanicValido$Age, costo_ticket = DataTitanicValido$Fare)
d_kmeans<-kmeans(d_cluster,centers = 4, iter.max = 100)
#agregamos la columna con los datos del cluster
d_cluster$cluster<-d_kmeans$cluster
#mostramos informacion de los datos del cluster
head(d_kmeans)
head(d_cluster)
#graficamos los puntos y los centroides utilizando el atributo "centers:"
plot(d_cluster$edad,d_cluster$costo_ticket, col = d_kmeans$cluster, main = "Clustering con K-means",
xlab = "Edad", ylab = "Costo Ticket")
points(d_kmeans$centers, pch = 8, cex = 2)
write.table(d_cluster,"titanic_K-means.csv", sep = ",", row.names = FALSE)
#kmeans con 3 variables
library(scatterplot3d)
d_cluster<-data.frame(edad = DataTitanicValido$Age,
costo_ticket = DataTitanicValido$Fare,
padres_hijos = DataTitanicValido$Parch)
d_kmeans<-kmeans(d_cluster,centers = 4, iter.max = 100)
#agregamos la columna con los datos del cluster
d_cluster$cluster<-d_kmeans$cluster
#mostramos informacion de los datos del cluster
head(d_kmeans)
head(d_cluster)
#graficamos los datos en plano 3D
scatterplot3d(d_cluster$edad,d_cluster$costo_ticket,d_cluster$padres_hijos, color = d_kmeans$cluster,
main = "Clustering con K-Means", xlab = "Edad", ylab = "Costo Ticket", zlab = "Padres&Hijos",
type  = "h")
##MODELOS PREDICTIVOS CON ARBOLES DE DECISION
#cargamos la libreria para construccion de modelos con arboles decision
library(rpart)
m_arbol<-rpart(Survived~Sex + Age + SibSp + Parch + Fare + Embarked, data = DataTitanicValido, method = "class")
#mostramos lo generado por el modelo
m_arbol
printcp(m_arbol)
#graficamos el arbol
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(m_arbol, uniform = TRUE)
text(m_arbol, use.n=TRUE, all=TRUE, cex=.8)
#graficando con mejores librerias
#install.packages("rattle")
#install.packages("rpart.plot")
#install.packages("RColorBrewer")
DataTitanicValido<-transform(DataTitanicValido, Pclass = factor(Pclass))
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(m_arbol, uniform = TRUE)
text(m_arbol, use.n=TRUE, all=TRUE, cex=.8)
fancyRpartPlot(m_arbol)
m_arbol<-rpart(Survived~Sex + Age + SibSp + Parch + Fare + Embarked + Pclass, data = DataTitanicValido, method = "class")
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(m_arbol, uniform = TRUE)
text(m_arbol, use.n=TRUE, all=TRUE, cex=.8)
fancyRpartPlot(m_arbol)
DataTitanicPredict<-read.table("titanic_predict.csv", sep = ",", header = TRUE)
DataTitanicPredict<-transform(DataTitanicPredict, Pclass = factor(Pclass))
prediccion<-predict(m_arbol,DataTitanicPredict, type = "class")
head(prediccion)
DataTitanicPredict$prediccion<-prediccion
DataTitanicPredict$prediccion<-prediccion
head(DataTitanicPredict)
head(DataTitanicPredict,10)
prediccion<-predict(m_arbol,DataTitanicPredict, type = "class")
head(prediccion)
DataTitanicPredict$prediccion<-prediccion
head(DataTitanicPredict)
DataTitanic
DataTitanicPred
DataTitanicPredict
DataTitanicPredict<-read.table("titanic_predict.csv", sep = ",", header = TRUE)
#transformamos los valores
DataTitanicPredict<-transform(DataTitanicPredict, Pclass = factor(Pclass))
prediccion<-predict(m_arbol,DataTitanicPredict, type = "class")
DataTitanicPredict$prediccion<-prediccion
head(DataTitanicPredict,10)
write.table(DataTitanicPredict,"titanic_predict_tree.csv", sep = ",", row.names = FALSE)
?install.packages
install.packages("ggplot2" dep = TRUE)
install.packages("ggplot2", dep = TRUE)
install.packages("ggplot2" dependencies = TRUE)
install.packages(ggplot2 dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
fancyRpartPlot(m_arbol)
qplot(Age, data = DataTitanicValido, fill = Pclass, facets = .~Embarked, main = "Grafico GGPLOT", binwidth = 5)
qplot(Fare,Age, data = DataTitanicValido, color = Pclass, facets = Embarked~., main = "Grafico GGPLOT")
qplot(Fare,Age, data = DataTitanicValido, color = Pclass, geom = c("point","smooth"))
qplot(Fare,Age, data = DataTitanicValido, color = Pclass, geom = c("point","smooth"))
qplot(Fare,Age, data = DataTitanicValido, color = Pclass, geom = c("point","smooth"))
qplot(Fare,Age, data = DataTitanicValido, color = Pclass)
qplot(Fare,Age, data = DataTitanicValido, color = Pclass, facets = Embarked~., main = "Grafico GGPLOT")
png(file = "plot1.png",width = 480, height = 480)
qplot(Fare,Age, data = DataTitanicValido, color = Pclass, facets = Embarked~., main = "Grafico GGPLOT")
dev.off()
png(file = "plot1.png",width = 800, height = 800)
qplot(Fare,Age, data = DataTitanicValido, color = Pclass, facets = Embarked~., main = "Grafico GGPLOT")
dev.off()
png(file = "Cluster_Kmeans.png",width = 800, height = 800)
plot(d_cluster$edad,d_cluster$costo_ticket, col = d_kmeans$cluster, main = "Clustering con K-means",
xlab = "Edad", ylab = "Costo Ticket")
points(d_kmeans$centers, pch = 8, cex = 2)
dev.off()
png(file = "Cluster_Kmeans3D.png",width = 800, height = 800)
#graficamos los datos en plano 3D
scatterplot3d(d_cluster$edad,d_cluster$costo_ticket,d_cluster$padres_hijos, color = d_kmeans$cluster,
main = "Clustering con K-Means", xlab = "Edad", ylab = "Costo Ticket", zlab = "Padres&Hijos",
type  = "h")
dev.off()
#graficamos el arbol
png(file = "Arbol_baseplot.png",width = 800, height = 800)
par(mfrow = c(1,1), mar = c(2,2,2,2))
plot(m_arbol, uniform = TRUE)
text(m_arbol, use.n=TRUE, all=TRUE, cex=.8)
dev.off()
?rattle
png(file = "Arbol_rattle.png",width = 800, height = 800)
fancyRpartPlot(m_arbol)
dev.off()
x<-rnorm(100)
x<-rnorm(1000)
y<-rnorm(1000)
z<-data.frame(x = x, y = y)
z
head(x)
head(z)
k<-kmeans(x,centers = 3)
plot(z$x, z$y, col = k$cluster)
points(k$centers, pch = 8, col = "blue")
points(k$centers, pch = 8, col = "blue", cex = 2)
points(k$centers, pch = 8, col = "blue")
dev.off()
plot(z$x, z$y, col = k$cluster)
points(k$centers, pch = 8, col = "blue")
d_cluster<-data.frame(edad = DataTitanicValido$Age, costo_ticket = DataTitanicValido$Fare)
d_kmeans<-kmeans(d_cluster,centers = 4, iter.max = 100)
#agregamos la columna con los datos del cluster
d_cluster$cluster<-d_kmeans$cluster
#mostramos informacion de los datos del cluster
head(d_kmeans)
head(d_cluster)
plot(d_cluster$edad,d_cluster$costo_ticket, col = d_kmeans$cluster, main = "Clustering con K-means",
xlab = "Edad", ylab = "Costo Ticket")
points(d_kmeans$centers, pch = 8, cex = 2)
install.packages("RPostgreSQL")
library(RPostgreSQL)
